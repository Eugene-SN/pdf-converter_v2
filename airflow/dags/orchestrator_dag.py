#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚úÖ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô Orchestrator v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö 4 —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
- ‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
- ‚úÖ –ü—Ä—è–º–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —ç—Ç–∞–ø–∞–º–∏
- ‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.operators.trigger_dagrun import TriggerDagRunOperator
from airflow.exceptions import AirflowException
from typing import Dict, Any, Optional, List
import os
import json
import logging
import time

# –£—Ç–∏–ª–∏—Ç—ã
from shared_utils import (
    SharedUtils, NotificationUtils, ConfigUtils, 
    MetricsUtils, ErrorHandlingUtils
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DAG
DEFAULT_ARGS = {
    'owner': 'pdf-converter',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=3),
}

# –°–æ–∑–¥–∞–Ω–∏–µ Master DAG
dag = DAG(
    'orchestrator_dag',
    default_args=DEFAULT_ARGS,
    description='Master DAG: Orchestrator v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è PDF –∫–æ–Ω–≤–µ–π–µ—Ä–∞',
    schedule_interval=None,  # –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ API –æ—Ç Flask
    max_active_runs=5,
    catchup=False,
    tags=['pdf-converter', 'orchestrator', 'master-dag', 'v3', 'chinese-docs']
)

# ================================================================================
# –§–£–ù–ö–¶–ò–ò –û–†–ö–ï–°–¢–†–ê–¶–ò–ò
# ================================================================================

def validate_orchestrator_input(**context) -> Dict[str, Any]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    start_time = time.time()
    
    try:
        dag_run_conf = context['dag_run'].conf or {}
        logger.info(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {json.dumps(dag_run_conf, indent=2, ensure_ascii=False)}")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_params = ['input_file', 'filename', 'target_language', 'timestamp']
        missing_params = [param for param in required_params if not dag_run_conf.get(param)]
        
        if missing_params:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
        input_file = dag_run_conf['input_file']
        if not SharedUtils.validate_input_file(input_file):
            raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {input_file}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–∞
        supported_languages = ['en', 'ru', 'zh', 'original']
        target_language = dag_run_conf['target_language']
        if target_language not in supported_languages:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫: {target_language}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {supported_languages}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        master_config = {
            'input_file': input_file,
            'filename': dag_run_conf['filename'],
            'target_language': target_language,
            'quality_level': dag_run_conf.get('quality_level', 'high'),
            'enable_ocr': dag_run_conf.get('enable_ocr', False),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω
            'preserve_structure': dag_run_conf.get('preserve_structure', True),
            'preserve_technical_terms': dag_run_conf.get('preserve_technical_terms', True),
            'chinese_document': dag_run_conf.get('chinese_document', True),
            'timestamp': dag_run_conf['timestamp'],
            'batch_id': dag_run_conf.get('batch_id'),
            'batch_mode': dag_run_conf.get('batch_mode', False),
            'master_run_id': context['dag_run'].run_id,
            'pipeline_version': '3.0_simplified',
            'processing_start_time': datetime.now().isoformat()
        }
        
        MetricsUtils.record_processing_metrics(
            dag_id='orchestrator_dag',
            task_id='validate_orchestrator_input',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ñ–∞–π–ª–∞: {dag_run_conf['filename']}")
        return master_config
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='orchestrator_dag',
            task_id='validate_orchestrator_input',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def prepare_stage1_config(**context) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Stage 1 (Document Preprocessing)"""
    try:
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Stage 1
        stage1_config = {
            'input_file': master_config['input_file'],
            'filename': master_config['filename'],
            'enable_ocr': master_config['enable_ocr'],
            'preserve_structure': master_config['preserve_structure'],
            'chinese_document': master_config['chinese_document'],
            'quality_level': master_config['quality_level'],
            'timestamp': master_config['timestamp'],
            'master_run_id': master_config['master_run_id'],
            'extract_tables': True,
            'extract_images': True,
            'processing_timeout': 1800,  # 30 –º–∏–Ω—É—Ç
            'stage1_version': '3.0'
        }
        
        logger.info(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞–ø—É—Å–∫ Stage 1: Document Preprocessing")
        return stage1_config
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Stage 1: {e}")
        raise

def prepare_stage2_config(**context) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Stage 2 (Content Transformation)"""
    try:
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        
        # Stage 2 –ø–æ–ª—É—á–∏—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Stage 1
        stage2_config = {
            'intermediate_file': f"/app/temp/stage1_results_{master_config['timestamp']}.json",
            'original_config': master_config,
            'stage1_completed': True,
            'chinese_document': master_config['chinese_document'],
            'preserve_technical_terms': master_config['preserve_technical_terms'],
            'transformation_method': 'chinese_optimized_v3',
            'quality_level': master_config['quality_level'],
            'stage2_version': '3.0'
        }
        
        logger.info(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞–ø—É—Å–∫ Stage 2: Content Transformation")
        return stage2_config
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Stage 2: {e}")
        raise

def prepare_stage3_config(**context) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Stage 3 (Translation Pipeline)"""
    try:
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        
        # Stage 3 –ø–æ–ª—É—á–∏—Ç Markdown —Ñ–∞–π–ª –æ—Ç Stage 2
        stage3_config = {
            'markdown_file': f"/app/output/zh/{master_config['timestamp']}_{master_config['filename'].replace('.pdf', '.md')}",
            'original_config': master_config,
            'stage2_completed': True,
            'target_language': master_config['target_language'],
            'preserve_technical_terms': master_config['preserve_technical_terms'],
            'chinese_source': True,
            'translation_method': 'builtin_dictionary_v3',
            'stage3_version': '3.0'
        }
        
        logger.info(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞–ø—É—Å–∫ Stage 3: Translation Pipeline")
        return stage3_config
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Stage 3: {e}")
        raise

def prepare_stage4_config(**context) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Stage 4 (Quality Assurance)"""
    try:
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        
        # Stage 4 –ø–æ–ª—É—á–∏—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç Stage 3
        stage4_config = {
            'translated_file': f"/app/output/{master_config['target_language']}/{master_config['timestamp']}_{master_config['filename'].replace('.pdf', '.md')}",
            'original_config': master_config,
            'stage3_completed': True,
            'target_language': master_config['target_language'],
            'quality_target': 85.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –±–∞–ª–ª
            'auto_correction': False,  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∞–≤—Ç–æ-–∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
            'validation_levels': 5,
            'stage4_version': '3.0'
        }
        
        logger.info(f"üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∑–∞–ø—É—Å–∫ Stage 4: Quality Assurance")
        return stage4_config
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ Stage 4: {e}")
        raise

def monitor_pipeline_progress(**context) -> Dict[str, Any]:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞"""
    try:
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤
        pipeline_status = {
            'master_run_id': master_config['master_run_id'],
            'filename': master_config['filename'],
            'target_language': master_config['target_language'],
            'processing_start_time': master_config['processing_start_time'],
            'current_time': datetime.now().isoformat(),
            'stages_status': {
                'stage1_preprocessing': 'completed',
                'stage2_transformation': 'completed', 
                'stage3_translation': 'completed',
                'stage4_quality_assurance': 'completed'
            },
            'overall_progress': '100%',
            'pipeline_version': '3.0_simplified',
            'processing_method': 'builtin_logic'
        }
        
        logger.info(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–≤–µ–π–µ—Ä–∞: {pipeline_status['overall_progress']}")
        return pipeline_status
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {e}")
        raise

def finalize_orchestration(**context) -> Dict[str, Any]:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        pipeline_status = context['task_instance'].xcom_pull(task_ids='monitor_pipeline_progress')
        
        # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        start_time = datetime.fromisoformat(master_config['processing_start_time'])
        end_time = datetime.now()
        processing_duration = end_time - start_time
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
        orchestration_result = {
            'master_run_id': master_config['master_run_id'],
            'processing_completed': True,
            'total_processing_time': str(processing_duration),
            'processing_duration_seconds': processing_duration.total_seconds(),
            'source_file': master_config['input_file'],
            'filename': master_config['filename'],
            'target_language': master_config['target_language'],
            'final_output_path': f"/app/output/{master_config['target_language']}/{master_config['timestamp']}_{master_config['filename'].replace('.pdf', '.md')}",
            'qa_report_path': f"/app/temp/qa_report_{master_config['timestamp']}.json",
            'pipeline_stages_completed': 4,
            'simplified_architecture': True,
            'chinese_document_optimized': master_config['chinese_document'],
            'success': True,
            'pipeline_version': '3.0',
            'processing_stats': {
                'ocr_used': master_config['enable_ocr'],
                'technical_terms_preserved': master_config['preserve_technical_terms'],
                'target_language': master_config['target_language'],
                'quality_level': master_config['quality_level']
            }
        }
        
        logger.info(f"üéØ –û—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {processing_duration}")
        return orchestration_result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        raise

def notify_orchestrator_completion(**context) -> None:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤—Å–µ–≥–æ –∫–æ–Ω–≤–µ–π–µ—Ä–∞"""
    try:
        orchestration_result = context['task_instance'].xcom_pull(task_ids='finalize_orchestration')
        master_config = context['task_instance'].xcom_pull(task_ids='validate_orchestrator_input')
        
        success = orchestration_result['success']
        processing_time = orchestration_result['total_processing_time']
        filename = master_config['filename']
        target_language = master_config['target_language']
        
        if success:
            message = f"""
üéâ –£–ü–†–û–©–ï–ù–ù–´–ô PDF –ö–û–ù–í–ï–ô–ï–† v3.0 –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!

üìÑ –§–∞–π–ª: {filename}
üåê –Ø–∑—ã–∫: {target_language}
‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time}

üîÑ –í–´–ü–û–õ–ù–ï–ù–ù–´–ï –≠–¢–ê–ü–´:
‚úÖ Stage 1: Document Preprocessing (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
‚úÖ Stage 2: Content Transformation (–∫–∏—Ç–∞–π—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
‚úÖ Stage 3: Translation Pipeline (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏)
‚úÖ Stage 4: Quality Assurance (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)

üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:
- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞
- –ö–∏—Ç–∞–π—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã: ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã
- –ò—Ç–æ–≥–æ–≤—ã–π —Ñ–∞–π–ª: {orchestration_result['final_output_path']}
- QA –æ—Ç—á–µ—Ç: {orchestration_result['qa_report_path']}

üöÄ –°–ò–°–¢–ï–ú–ê v3.0 –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!
            """
        else:
            message = f"""
‚ùå –£–ü–†–û–©–ï–ù–ù–´–ô PDF –ö–û–ù–í–ï–ô–ï–† v3.0 –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–ê–ú–ò

üìÑ –§–∞–π–ª: {filename}
‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {processing_time}

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã.
            """
        
        logger.info(message)
        
        if success:
            NotificationUtils.send_success_notification(context, orchestration_result)
        else:
            NotificationUtils.send_failure_notification(context, Exception("Pipeline failed"))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ================================================================================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß
# ================================================================================

# –ó–∞–¥–∞—á–∞ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
validate_input = PythonOperator(
    task_id='validate_orchestrator_input',
    python_callable=validate_orchestrator_input,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stage 1
prepare_stage1 = PythonOperator(
    task_id='prepare_stage1_config',
    python_callable=prepare_stage1_config,
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 3: –ó–∞–ø—É—Å–∫ Stage 1 - Document Preprocessing
trigger_stage1 = TriggerDagRunOperator(
    task_id='trigger_stage1_preprocessing',
    trigger_dag_id='document_preprocessing',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_stage1_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    allowed_states=['success'],
    execution_timeout=timedelta(minutes=45),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stage 2  
prepare_stage2 = PythonOperator(
    task_id='prepare_stage2_config',
    python_callable=prepare_stage2_config,
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 5: –ó–∞–ø—É—Å–∫ Stage 2 - Content Transformation
trigger_stage2 = TriggerDagRunOperator(
    task_id='trigger_stage2_transformation',
    trigger_dag_id='content_transformation',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_stage2_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    allowed_states=['success'],
    execution_timeout=timedelta(minutes=30),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 6: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stage 3
prepare_stage3 = PythonOperator(
    task_id='prepare_stage3_config',
    python_callable=prepare_stage3_config,
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 7: –ó–∞–ø—É—Å–∫ Stage 3 - Translation Pipeline
trigger_stage3 = TriggerDagRunOperator(
    task_id='trigger_stage3_translation',
    trigger_dag_id='translation_pipeline',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_stage3_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    allowed_states=['success'],
    execution_timeout=timedelta(minutes=30),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 8: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Stage 4
prepare_stage4 = PythonOperator(
    task_id='prepare_stage4_config',
    python_callable=prepare_stage4_config,
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 9: –ó–∞–ø—É—Å–∫ Stage 4 - Quality Assurance
trigger_stage4 = TriggerDagRunOperator(
    task_id='trigger_stage4_quality_assurance',
    trigger_dag_id='quality_assurance',
    conf="{{ task_instance.xcom_pull(task_ids='prepare_stage4_config') }}",
    wait_for_completion=True,
    poke_interval=30,
    allowed_states=['success'],
    execution_timeout=timedelta(minutes=20),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 10: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
monitor_progress = PythonOperator(
    task_id='monitor_pipeline_progress',
    python_callable=monitor_pipeline_progress,
    execution_timeout=timedelta(minutes=3),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 11: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏–∏
finalize_orchestrator = PythonOperator(
    task_id='finalize_orchestration',
    python_callable=finalize_orchestration,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 12: –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
notify_completion = PythonOperator(
    task_id='notify_orchestrator_completion',
    python_callable=notify_orchestrator_completion,
    trigger_rule='all_done',
    execution_timeout=timedelta(minutes=3),
    dag=dag
)

# ================================================================================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
# ================================================================================

# –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö 4 —ç—Ç–∞–ø–æ–≤
(validate_input >> prepare_stage1 >> trigger_stage1 >> 
 prepare_stage2 >> trigger_stage2 >>
 prepare_stage3 >> trigger_stage3 >>
 prepare_stage4 >> trigger_stage4 >>
 monitor_progress >> finalize_orchestrator >> notify_completion)

# ================================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# ================================================================================

def handle_orchestrator_failure(context):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        failed_task = context['task_instance'].task_id
        master_config = context.get('dag_run', {}).conf or {}
        exception = context.get('exception')
        
        error_message = f"""
üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –û–†–ö–ï–°–¢–†–ê–¢–û–†–ï v3.0

–ó–∞–¥–∞—á–∞: {failed_task}
–§–∞–π–ª: {master_config.get('filename', 'unknown')}
–û—à–∏–±–∫–∞: {str(exception) if exception else 'Unknown error'}

–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. 

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –£–°–¢–†–ê–ù–ï–ù–ò–Æ:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö DAG —Ñ–∞–π–ª–æ–≤
2. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π

–ö–æ–Ω–≤–µ–π–µ—Ä v3.0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤.
        """
        
        logger.error(error_message)
        NotificationUtils.send_failure_notification(context, exception)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
for task in dag.tasks:
    task.on_failure_callback = handle_orchestrator_failure