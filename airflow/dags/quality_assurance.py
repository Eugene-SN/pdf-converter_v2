#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô DAG 3: Quality Assurance via Microservice Architecture
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç ImportError: QualityAssuranceOperator

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
- ‚úÖ –£–±—Ä–∞–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–º–ø–æ—Ä—Ç QualityAssuranceOperator
- ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ HTTP API
- ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã –∏–∑ shared_utils
- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.exceptions import AirflowException
import os
import json
import logging
import time
import requests
from typing import Dict, Any, Optional

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞—Å—Å—ã
from shared_utils import (
    SharedUtils, NotificationUtils, ConfigUtils, 
    VLLMUtils, MetricsUtils, ErrorHandlingUtils
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DAG
DEFAULT_ARGS = {
    'owner': 'pdf-converter',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=3),
}

dag = DAG(
    'quality_assurance_v2',
    default_args=DEFAULT_ARGS,
    description='DAG 3: Quality Assurance via Microservice Architecture',
    schedule_interval=None,
    max_active_runs=3,
    catchup=False,
    tags=['pdf-converter', 'dag3', 'quality-assurance', 'microservices']
)

def validate_qa_input(**context) -> Dict[str, Any]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QA"""
    try:
        dag_run_conf = context['dag_run'].conf or {}
        logger.info(f"üîç QA: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {json.dumps(dag_run_conf, indent=2)}")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        required_params = ['intermediate_file', 'original_config']
        missing_params = [param for param in required_params if not dag_run_conf.get(param)]
        
        if missing_params:
            raise ValueError(f"QA: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {missing_params}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        intermediate_file = dag_run_conf['intermediate_file']
        if not os.path.exists(intermediate_file):
            raise ValueError(f"QA: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {intermediate_file}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        data = SharedUtils.load_intermediate_result(intermediate_file)
        if not data:
            raise ValueError("QA: –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")
        
        logger.info(f"‚úÖ QA: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã")
        return dag_run_conf
        
    except Exception as e:
        logger.error(f"‚ùå QA: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        raise

def call_quality_assurance_service(**context) -> Dict[str, Any]:
    """–í—ã–∑–æ–≤ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞ Quality Assurance —á–µ—Ä–µ–∑ HTTP API"""
    start_time = time.time()
    dag_config = context['task_instance'].xcom_pull(task_ids='validate_qa_input')
    
    try:
        # URL —Å–µ—Ä–≤–∏—Å–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        qa_url = os.getenv('QUALITY_ASSURANCE_URL', 'http://quality-assurance:8002')
        api_key = os.getenv('QA_API_KEY')
        timeout = int(os.getenv('QA_VALIDATION_TIMEOUT', '600'))
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        request_data = {
            'intermediate_file': dag_config['intermediate_file'],
            'original_config': dag_config['original_config'],
            'qa_enabled': dag_config.get('qa_enabled', True),
            'qa_threshold': dag_config.get('qa_threshold', 0.95),
            'auto_correction_enabled': dag_config.get('auto_correction_enabled', True),
            'max_corrections': dag_config.get('max_corrections', 5),
            'timestamp': datetime.now().isoformat()
        }
        
        headers = {
            'Content-Type': 'application/json',
            'User-Agent': 'Airflow-QA-DAG'
        }
        
        if api_key:
            headers['Authorization'] = f'Bearer {api_key}'
        
        logger.info(f"üîÑ QA: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {qa_url}/validate")
        
        # HTTP POST –∫ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—É
        response = requests.post(
            f"{qa_url}/validate",
            json=request_data,
            headers=headers,
            timeout=timeout
        )
        
        if response.status_code == 200:
            result = response.json()
            logger.info(f"‚úÖ QA: –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ú–µ—Ç—Ä–∏–∫–∏
            MetricsUtils.record_processing_metrics(
                dag_id='quality_assurance_v2',
                task_id='call_quality_assurance_service',
                processing_time=time.time() - start_time,
                success=True
            )
            
            return {
                'success': True,
                'qa_result': result.get('qa_result', {}),
                'corrections_made': result.get('corrections_made', []),
                'quality_score': result.get('quality_score', 0.0),
                'validated_file': result.get('validated_file'),
                'original_config': dag_config
            }
        else:
            error_msg = f"quality-assurance —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code}"
            logger.error(f"‚ùå QA: {error_msg}")
            
            MetricsUtils.record_processing_metrics(
                dag_id='quality_assurance_v2',
                task_id='call_quality_assurance_service',
                processing_time=time.time() - start_time,
                success=False
            )
            
            return {
                'success': False,
                'error': error_msg,
                'http_status': response.status_code,
                'original_config': dag_config
            }
            
    except requests.Timeout:
        error_msg = "Timeout –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ quality-assurance —Å–µ—Ä–≤–∏—Å—É"
        logger.error(f"‚ùå QA: {error_msg}")
        return {
            'success': False,
            'error': error_msg,
            'error_type': 'timeout',
            'original_config': dag_config
        }
    
    except requests.ConnectionError:
        error_msg = "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ quality-assurance —Å–µ—Ä–≤–∏—Å—É"
        logger.error(f"‚ùå QA: {error_msg}")
        return {
            'success': False,
            'error': error_msg,
            'error_type': 'connection_error',
            'original_config': dag_config
        }
    
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ quality-assurance: {str(e)}"
        logger.error(f"‚ùå QA: {error_msg}")
        return {
            'success': False,
            'error': error_msg,
            'error_type': 'unexpected_error',
            'original_config': dag_config
        }

def prepare_qa_results(**context) -> Dict[str, Any]:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ QA –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤"""
    start_time = time.time()
    
    try:
        qa_result = context['task_instance'].xcom_pull(task_ids='call_quality_assurance_service')
        
        if not qa_result.get('success'):
            raise AirflowException(f"QA –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {qa_result.get('error')}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö DAG
        result_config = {
            'validated_file': qa_result.get('validated_file'),
            'quality_score': qa_result.get('quality_score', 0.0),
            'corrections_made': len(qa_result.get('corrections_made', [])),
            'qa_metadata': {
                'validation_timestamp': datetime.now().isoformat(),
                'qa_version': '2.0',
                'quality_threshold_met': qa_result.get('quality_score', 0.0) >= 0.95
            },
            'original_config': qa_result['original_config'],
            'qa_completed': True,
            'ready_for_next_stage': True
        }
        
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance_v2',
            task_id='prepare_qa_results',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"‚úÖ QA: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –ö–∞—á–µ—Å—Ç–≤–æ: {result_config['quality_score']:.3f}")
        return result_config
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance_v2',
            task_id='prepare_qa_results',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå QA: –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
        raise

def notify_qa_completion(**context) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ QA"""
    try:
        qa_result = context['task_instance'].xcom_pull(task_ids='call_quality_assurance_service')
        final_result = context['task_instance'].xcom_pull(task_ids='prepare_qa_results')
        
        if qa_result and qa_result.get('success'):
            message = f"""
‚úÖ QA: QUALITY ASSURANCE –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û

üìä –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {final_result.get('quality_score', 0.0):.3f}
üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–¥–µ–ª–∞–Ω–æ: {final_result.get('corrections_made', 0)}
‚úÖ –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {'–î–∞' if final_result.get('qa_metadata', {}).get('quality_threshold_met') else '–ù–µ—Ç'}
üìÅ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {final_result.get('validated_file', 'N/A')}

üîÑ –ì–û–¢–û–í –ö –°–õ–ï–î–£–Æ–©–ï–ú–£ –≠–¢–ê–ü–£ –û–ë–†–ê–ë–û–¢–ö–ò
            """
            NotificationUtils.send_success_notification(context, qa_result)
        else:
            error = qa_result.get('error', 'Unknown error') if qa_result else 'No result received'
            message = f"""
‚ùå QA: QUALITY ASSURANCE –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô

‚ùå –û—à–∏–±–∫–∞: {error}
‚è∞ –í—Ä–µ–º—è: {datetime.now().isoformat()}

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å quality-assurance —Å–µ—Ä–≤–∏—Å–∞
            """
            NotificationUtils.send_failure_notification(context, Exception(error))
        
        logger.info(message)
        
    except Exception as e:
        logger.error(f"‚ùå QA: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ‚úÖ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß QA DAG

# –ó–∞–¥–∞—á–∞ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
validate_input = PythonOperator(
    task_id='validate_qa_input',
    python_callable=validate_qa_input,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 2: –í—ã–∑–æ–≤ QA –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
quality_check = PythonOperator(
    task_id='call_quality_assurance_service',
    python_callable=call_quality_assurance_service,
    execution_timeout=timedelta(minutes=30),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
prepare_results = PythonOperator(
    task_id='prepare_qa_results',
    python_callable=prepare_qa_results,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
notify_completion = PythonOperator(
    task_id='notify_qa_completion',
    python_callable=notify_qa_completion,
    trigger_rule='all_done',
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
validate_input >> quality_check >> prepare_results >> notify_completion

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def handle_qa_failure(context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ QA DAG"""
    try:
        failed_task = context['task_instance'].task_id
        exception = context.get('exception')
        
        error_message = f"""
üî• –û–®–ò–ë–ö–ê –í QA DAG: QUALITY ASSURANCE

–ó–∞–¥–∞—á–∞: {failed_task}
–û—à–∏–±–∫–∞: {str(exception) if exception else 'Unknown error'}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. quality-assurance —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
2. –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª
3. –ü—Ä–µ–≤—ã—à–µ–Ω timeout –≤–∞–ª–∏–¥–∞—Ü–∏–∏
4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞.
        """
        
        logger.error(error_message)
        NotificationUtils.send_failure_notification(context, exception)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫ QA: {e}")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
for task in dag.tasks:
    task.on_failure_callback = handle_qa_failure