#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚úÖ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–´–ô Quality Assurance v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤

–ö–õ–Æ–ß–ï–í–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø:
- ‚úÖ –£–±—Ä–∞–Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç QA –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
- ‚úÖ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
- ‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
- ‚úÖ –ü—Ä–æ—Å—Ç–∞—è –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
"""

from datetime import datetime, timedelta
from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.exceptions import AirflowException
import os
import json
import logging
import time
import re
from typing import Dict, Any, Optional, List

# –£—Ç–∏–ª–∏—Ç—ã
from shared_utils import (
    SharedUtils, NotificationUtils, ConfigUtils, 
    MetricsUtils, ErrorHandlingUtils
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è DAG
DEFAULT_ARGS = {
    'owner': 'pdf-converter',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=2),
}

dag = DAG(
    'quality_assurance',
    default_args=DEFAULT_ARGS,
    description='DAG 4: Quality Assurance v3.0 - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∏—Ç–∞–π—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
    schedule_interval=None,
    max_active_runs=2,
    catchup=False,
    tags=['pdf-converter', 'dag4', 'qa', 'chinese-docs', 'v3']
)

# ================================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê
# ================================================================================

QA_RULES = {
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
    'min_content_length': 100,  # –º–∏–Ω–∏–º—É–º —Å–∏–º–≤–æ–ª–æ–≤
    'min_headings': 1,  # –º–∏–Ω–∏–º—É–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    'max_chinese_chars_ratio': 0.3,  # –º–∞–∫—Å–∏–º—É–º 30% –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    'require_title': True,
    'check_table_structure': True,
    'validate_markdown_syntax': True,
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
    'technical_terms_check': True,
    'preserve_brand_names': True,
    
    # –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    'min_quality_score': 80.0,  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞
    'excellent_quality_score': 95.0  # –æ—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
}

TECHNICAL_BRAND_TERMS = [
    'WenTian', 'Lenovo WenTian', 'ThinkSystem', 'AnyBay',
    'Xeon', 'Intel', 'Scalable Processors'
]

# ================================================================================
# –§–£–ù–ö–¶–ò–ò –ö–û–ù–¢–†–û–õ–Ø –ö–ê–ß–ï–°–¢–í–ê
# ================================================================================

def load_translated_document(**context) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞"""
    start_time = time.time()
    
    try:
        dag_run_conf = context['dag_run'].conf or {}
        logger.info(f"üîç –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞: {json.dumps(dag_run_conf, indent=2, ensure_ascii=False)}")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        translated_file = dag_run_conf.get('translated_file')
        if not translated_file or not os.path.exists(translated_file):
            raise ValueError(f"–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {translated_file}")
        
        # –ß—Ç–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        with open(translated_file, 'r', encoding='utf-8') as f:
            translated_content = f.read()
        
        if not translated_content.strip():
            raise ValueError("–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ QA
        qa_session = {
            'session_id': f"qa_{int(time.time())}",
            'translated_file': translated_file,
            'translated_content': translated_content,
            'original_config': dag_run_conf.get('original_config', {}),
            'translation_metadata': dag_run_conf.get('translation_metadata', {}),
            'qa_start_time': datetime.now().isoformat(),
            'target_quality': dag_run_conf.get('quality_target', 90.0),
            'auto_correction': dag_run_conf.get('auto_correction', True)
        }
        
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance',
            task_id='load_translated_document',
            processing_time=time.time() - start_time,
            success=True
        )
        
        content_length = len(translated_content)
        logger.info(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è QA: {content_length} —Å–∏–º–≤–æ–ª–æ–≤")
        return qa_session
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance',
            task_id='load_translated_document',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è QA: {e}")
        raise

def perform_quality_checks(**context) -> Dict[str, Any]:
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
    start_time = time.time()
    qa_session = context['task_instance'].xcom_pull(task_ids='load_translated_document')
    
    try:
        translated_content = qa_session['translated_content']
        target_quality = qa_session['target_quality']
        
        logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ü–µ–ª—å: {target_quality}%)")
        
        qa_results = {
            'checks_performed': [],
            'issues_found': [],
            'scores': {},
            'overall_score': 0.0,
            'corrections_suggested': [],
            'quality_level': 'unknown'
        }
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        structure_score = check_document_structure(translated_content, qa_results)
        qa_results['scores']['structure'] = structure_score
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        content_score = check_content_quality(translated_content, qa_results)
        qa_results['scores']['content'] = content_score
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        terms_score = check_technical_terms(translated_content, qa_results)
        qa_results['scores']['technical_terms'] = terms_score
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (–∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã)
        translation_score = check_translation_quality(translated_content, qa_results)
        qa_results['scores']['translation'] = translation_score
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        markdown_score = check_markdown_syntax(translated_content, qa_results)
        qa_results['scores']['markdown'] = markdown_score
        
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞
        overall_score = calculate_overall_score(qa_results['scores'])
        qa_results['overall_score'] = overall_score
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞
        qa_results['quality_level'] = determine_quality_level(overall_score)
        
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance',
            task_id='perform_quality_checks',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –û–±—â–∏–π –±–∞–ª–ª: {overall_score:.1f}%")
        return qa_results
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance',
            task_id='perform_quality_checks',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        raise

def check_document_structure(content: str, qa_results: Dict) -> float:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    score = 100.0
    qa_results['checks_performed'].append('document_structure')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if len(content) < QA_RULES['min_content_length']:
            qa_results['issues_found'].append(f"–î–æ–∫—É–º–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
            score -= 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        headers = re.findall(r'^#+\s+', content, re.MULTILINE)
        if len(headers) < QA_RULES['min_headings']:
            qa_results['issues_found'].append(f"–ú–∞–ª–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {len(headers)}")
            score -= 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ title (–≥–ª–∞–≤–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        if QA_RULES['require_title'] and not re.search(r'^#\s+', content, re.MULTILINE):
            qa_results['issues_found'].append("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≥–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫")
            score -= 15
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        if QA_RULES['check_table_structure']:
            tables = re.findall(r'\|.*\|', content)
            malformed_tables = 0
            
            for table_line in tables:
                if not re.search(r'\|[\s\-:|]+\|', table_line):  # –ù–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
                    malformed_tables += 1
            
            if malformed_tables > len(tables) * 0.3:  # –ë–æ–ª–µ–µ 30% –ø–ª–æ—Ö–∏—Ö —Ç–∞–±–ª–∏—Ü
                qa_results['issues_found'].append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {malformed_tables}")
                score -= 10
        
        return max(0, score)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return 50.0

def check_content_quality(content: str, qa_results: Dict) -> float:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    score = 100.0
    qa_results['checks_performed'].append('content_quality')
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Å—Ç—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        empty_sections = len(re.findall(r'^#+\s+.*\n\s*\n\s*#+', content, re.MULTILINE))
        if empty_sections > 0:
            qa_results['issues_found'].append(f"–ü—É—Å—Ç—ã–µ —Ä–∞–∑–¥–µ–ª—ã: {empty_sections}")
            score -= empty_sections * 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫
        lines = content.split('\n')
        unique_lines = set(line.strip() for line in lines if line.strip())
        repetition_ratio = 1 - (len(unique_lines) / max(len(lines), 1))
        
        if repetition_ratio > 0.3:  # –ë–æ–ª–µ–µ 30% –ø–æ–≤—Ç–æ—Ä–æ–≤
            qa_results['issues_found'].append(f"–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ç–æ—Ä–æ–≤: {repetition_ratio:.1%}")
            score -= 20
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        long_lines = [line for line in lines if len(line) > 200 and not line.startswith('|')]
        if len(long_lines) > len(lines) * 0.2:  # –ë–æ–ª–µ–µ 20% –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            qa_results['issues_found'].append(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–ª–∏–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫: {len(long_lines)}")
            score -= 10
        
        return max(0, score)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
        return 70.0

def check_technical_terms(content: str, qa_results: Dict) -> float:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
    score = 100.0
    qa_results['checks_performed'].append('technical_terms')
    
    try:
        if not QA_RULES['technical_terms_check']:
            return score
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–µ–Ω–¥–æ–≤
        if QA_RULES['preserve_brand_names']:
            missing_brands = []
            for brand in TECHNICAL_BRAND_TERMS:
                if brand not in content and brand.lower() not in content.lower():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –±—Ä–µ–Ω–¥ –≤ –∫–∏—Ç–∞–π—Å–∫–æ–º –≤–∏–¥–µ
                    chinese_brands = {'WenTian': 'ÈóÆÂ§©', 'Lenovo WenTian': 'ËÅîÊÉ≥ÈóÆÂ§©', 'ThinkSystem': 'Â§©Êìé'}
                    chinese_form = chinese_brands.get(brand)
                    if chinese_form and chinese_form in content:
                        missing_brands.append(f"{brand} (–Ω–∞–π–¥–µ–Ω –≤ –∫–∏—Ç–∞–π—Å–∫–æ–º –≤–∏–¥–µ: {chinese_form})")
            
            if missing_brands:
                qa_results['issues_found'].append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –±—Ä–µ–Ω–¥—ã: {missing_brands}")
                score -= len(missing_brands) * 15
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏–∏
        tech_indicators = ['Processor', 'Memory', 'Storage', 'Network', 'Power', 'Rack', 'Server']
        found_indicators = sum(1 for indicator in tech_indicators if indicator in content)
        
        if found_indicators == 0:
            qa_results['issues_found'].append("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã")
            score -= 20
        elif found_indicators < 3:
            qa_results['corrections_suggested'].append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª–Ω–æ—Ç—É —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤")
            score -= 5
        
        return max(0, score)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤: {e}")
        return 80.0

def check_translation_quality(content: str, qa_results: Dict) -> float:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    score = 100.0
    qa_results['checks_performed'].append('translation_quality')
    
    try:
        # –ü–æ–¥—Å—á–µ—Ç –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        chinese_chars = len(re.findall(r'[\u4e00-\u9fff]', content))
        total_chars = len(content)
        
        if total_chars > 0:
            chinese_ratio = chinese_chars / total_chars
            max_allowed_ratio = QA_RULES['max_chinese_chars_ratio']
            
            if chinese_ratio > max_allowed_ratio:
                qa_results['issues_found'].append(
                    f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤: {chinese_ratio:.1%} (–ª–∏–º–∏—Ç: {max_allowed_ratio:.1%})"
                )
                score -= (chinese_ratio - max_allowed_ratio) * 100
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∏—Ç–∞–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if chinese_chars > 0:
                qa_results['corrections_suggested'].append(
                    f"–ù–∞–π–¥–µ–Ω–æ {chinese_chars} –Ω–µ–ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –∫–∏—Ç–∞–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –ø–æ—Ç–µ—Ä—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if total_chars < 500:  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
            qa_results['issues_found'].append("–î–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞")
            score -= 20
        
        return max(0, score)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return 75.0

def check_markdown_syntax(content: str, qa_results: Dict) -> float:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Markdown"""
    score = 100.0
    qa_results['checks_performed'].append('markdown_syntax')
    
    try:
        if not QA_RULES['validate_markdown_syntax']:
            return score
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        malformed_headers = re.findall(r'^#{7,}', content, re.MULTILINE)  # –ë–æ–ª–µ–µ 6 #
        if malformed_headers:
            qa_results['issues_found'].append(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏: {len(malformed_headers)}")
            score -= len(malformed_headers) * 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–æ–≤
        malformed_lists = re.findall(r'^\d+\.\s*$', content, re.MULTILINE)  # –ü—É—Å—Ç—ã–µ –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–æ–≤
        if malformed_lists:
            qa_results['issues_found'].append(f"–ü—É—Å—Ç—ã–µ –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–æ–≤: {len(malformed_lists)}")
            score -= len(malformed_lists) * 2
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–æ–∫
        broken_links = re.findall(r'\]\(\s*\)', content)  # –ü—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
        if broken_links:
            qa_results['issues_found'].append(f"–ü—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏: {len(broken_links)}")
            score -= len(broken_links) * 3
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        table_lines = re.findall(r'^\|.*\|$', content, re.MULTILINE)
        separator_lines = re.findall(r'^\|[\s\-:|]+\|$', content, re.MULTILINE)
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –Ω–∞ –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
        if table_lines and not separator_lines:
            qa_results['issues_found'].append("–¢–∞–±–ª–∏—Ü—ã –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤")
            score -= 15
        
        return max(0, score)
        
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Markdown: {e}")
        return 85.0

def calculate_overall_score(scores: Dict[str, float]) -> float:
    """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –±–∞–ª–ª–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    if not scores:
        return 0.0
    
    # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä–æ–∫
    weights = {
        'structure': 0.25,
        'content': 0.25,
        'technical_terms': 0.25,
        'translation': 0.20,
        'markdown': 0.05
    }
    
    total_weighted_score = 0.0
    total_weight = 0.0
    
    for check_type, score in scores.items():
        weight = weights.get(check_type, 0.1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10%
        total_weighted_score += score * weight
        total_weight += weight
    
    if total_weight > 0:
        return total_weighted_score / total_weight
    else:
        return sum(scores.values()) / len(scores)

def determine_quality_level(score: float) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    if score >= QA_RULES['excellent_quality_score']:
        return 'excellent'
    elif score >= QA_RULES['min_quality_score']:
        return 'good'
    elif score >= 60.0:
        return 'acceptable'
    else:
        return 'poor'

def generate_qa_report(**context) -> Dict[str, Any]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ –∫–∞—á–µ—Å—Ç–≤–∞"""
    start_time = time.time()
    
    try:
        qa_session = context['task_instance'].xcom_pull(task_ids='load_translated_document')
        qa_results = context['task_instance'].xcom_pull(task_ids='perform_quality_checks')
        
        overall_score = qa_results['overall_score']
        quality_level = qa_results['quality_level']
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        qa_report = {
            'session_id': qa_session['session_id'],
            'document_file': qa_session['translated_file'],
            'qa_completion_time': datetime.now().isoformat(),
            'processing_duration_seconds': time.time() - start_time,
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
            'overall_score': overall_score,
            'quality_level': quality_level,
            'quality_passed': overall_score >= QA_RULES['min_quality_score'],
            'detailed_scores': qa_results['scores'],
            
            # –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            'checks_performed': qa_results['checks_performed'],
            'issues_found': qa_results['issues_found'],
            'corrections_suggested': qa_results['corrections_suggested'],
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            'qa_rules_version': '3.0',
            'target_quality': qa_session['target_quality'],
            'auto_correction_enabled': qa_session['auto_correction'],
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'stats': {
                'total_checks': len(qa_results['checks_performed']),
                'issues_count': len(qa_results['issues_found']),
                'suggestions_count': len(qa_results['corrections_suggested'])
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_file = f"/app/temp/qa_report_{qa_session['session_id']}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(qa_report, f, ensure_ascii=False, indent=2)
        
        qa_report['report_file'] = report_file
        
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance',
            task_id='generate_qa_report',
            processing_time=time.time() - start_time,
            success=True
        )
        
        logger.info(f"üìä QA –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {overall_score:.1f}% ({quality_level})")
        return qa_report
        
    except Exception as e:
        MetricsUtils.record_processing_metrics(
            dag_id='quality_assurance',
            task_id='generate_qa_report',
            processing_time=time.time() - start_time,
            success=False
        )
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è QA –æ—Ç—á–µ—Ç–∞: {e}")
        raise

def finalize_qa_process(**context) -> Dict[str, Any]:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    try:
        qa_session = context['task_instance'].xcom_pull(task_ids='load_translated_document')
        qa_report = context['task_instance'].xcom_pull(task_ids='generate_qa_report')
        
        overall_score = qa_report['overall_score']
        quality_passed = qa_report['quality_passed']
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        final_result = {
            'qa_completed': True,
            'quality_score': overall_score,
            'quality_level': qa_report['quality_level'],
            'quality_passed': quality_passed,
            'final_document': qa_session['translated_file'],
            'qa_report': qa_report['report_file'],
            'processing_summary': {
                'checks_performed': qa_report['stats']['total_checks'],
                'issues_found': qa_report['stats']['issues_count'],
                'suggestions_made': qa_report['stats']['suggestions_count']
            },
            'pipeline_completed': quality_passed,
            'ready_for_delivery': quality_passed
        }
        
        logger.info(f"üéØ QA –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω: {overall_score:.1f}% {'‚úÖ PASSED' if quality_passed else '‚ùå FAILED'}")
        return final_result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ QA: {e}")
        raise

def notify_qa_completion(**context) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    try:
        final_result = context['task_instance'].xcom_pull(task_ids='finalize_qa_process')
        qa_session = context['task_instance'].xcom_pull(task_ids='load_translated_document')
        
        quality_score = final_result['quality_score']
        quality_level = final_result['quality_level']
        quality_passed = final_result['quality_passed']
        
        status_icon = "‚úÖ" if quality_passed else "‚ùå"
        status_text = "–ü–†–û–ô–î–ï–ù" if quality_passed else "–ù–ï –ü–†–û–ô–î–ï–ù"
        
        message = f"""
{status_icon} QUALITY ASSURANCE –ó–ê–í–ï–†–®–ï–ù

üéØ –û–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {quality_score:.1f}%
üìä –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞: {quality_level}
‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: {status_text}

üìÅ –ò—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {final_result['final_document']}
üìã QA –æ—Ç—á–µ—Ç: {final_result['qa_report']}

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {final_result['processing_summary']['checks_performed']}
- –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: {final_result['processing_summary']['issues_found']}
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–∞–Ω–æ: {final_result['processing_summary']['suggestions_made']}

üèÅ –ö–û–ù–í–ï–ô–ï–† PDF v3.0 –ó–ê–í–ï–†–®–ï–ù {'–£–°–ü–ï–®–ù–û' if quality_passed else '–° –ó–ê–ú–ï–ß–ê–ù–ò–Ø–ú–ò'}!
        """
        
        logger.info(message)
        
        if quality_passed:
            NotificationUtils.send_success_notification(context, final_result)
        else:
            NotificationUtils.send_failure_notification(context, Exception(f"–ö–∞—á–µ—Å—Ç–≤–æ –Ω–∏–∂–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ: {quality_score:.1f}%"))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è QA: {e}")

# ================================================================================
# –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ó–ê–î–ê–ß
# ================================================================================

# –ó–∞–¥–∞—á–∞ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
load_document = PythonOperator(
    task_id='load_translated_document',
    python_callable=load_translated_document,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 2: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–∞—á–µ—Å—Ç–≤–∞
quality_checks = PythonOperator(
    task_id='perform_quality_checks',
    python_callable=perform_quality_checks,
    execution_timeout=timedelta(minutes=10),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QA –æ—Ç—á–µ—Ç–∞
generate_report = PythonOperator(
    task_id='generate_qa_report',
    python_callable=generate_qa_report,
    execution_timeout=timedelta(minutes=5),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è QA –ø—Ä–æ—Ü–µ—Å—Å–∞
finalize_qa = PythonOperator(
    task_id='finalize_qa_process',
    python_callable=finalize_qa_process,
    execution_timeout=timedelta(minutes=3),
    dag=dag
)

# –ó–∞–¥–∞—á–∞ 5: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
notify_completion = PythonOperator(
    task_id='notify_qa_completion',
    python_callable=notify_qa_completion,
    trigger_rule='all_done',
    execution_timeout=timedelta(minutes=2),
    dag=dag
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
load_document >> quality_checks >> generate_report >> finalize_qa >> notify_completion

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
def handle_qa_failure(context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞"""
    try:
        failed_task = context['task_instance'].task_id
        exception = context.get('exception')
        
        error_message = f"""
üî• –û–®–ò–ë–ö–ê –í QUALITY ASSURANCE

–ó–∞–¥–∞—á–∞: {failed_task}
–û—à–∏–±–∫–∞: {str(exception) if exception else 'Unknown'}

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
2. –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
3. –û—à–∏–±–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª–∞—Ö QA
4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ—Ç—á–µ—Ç–∞

–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ QA.
        """
        
        logger.error(error_message)
        NotificationUtils.send_failure_notification(context, exception)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫ QA: {e}")

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º
for task in dag.tasks:
    task.on_failure_callback = handle_qa_failure