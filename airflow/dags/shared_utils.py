#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‚úÖ –î–û–ü–û–õ–ù–ï–ù–ù–´–ô shared_utils.py —Å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–º –∫–ª–∞—Å—Å–æ–º
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ ImportError –≤ DAG —Ñ–∞–π–ª–∞—Ö

–î–û–ü–û–õ–ù–ï–ù–ò–Ø:
- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å QualityAssuranceOperator (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
- ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
- ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
"""

import os
import json
import logging
import hashlib
import tempfile
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any, Union
import requests
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class SharedUtils:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö DAG"""

    @staticmethod
    def validate_input_file(file_path: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        try:
            if not os.path.exists(file_path):
                logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 500MB)
            file_size = os.path.getsize(file_path)
            max_size = 500 * 1024 * 1024  # 500MB
            if file_size > max_size:
                logger.error(f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} bytes")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF signature
            with open(file_path, 'rb') as f:
                header = f.read(4)
                if not header.startswith(b'%PDF'):
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç PDF —Ñ–∞–π–ª–∞: {file_path}")
                    return False

            logger.info(f"‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω: {file_path} ({file_size} bytes)")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False

    @staticmethod
    def create_work_directory(base_path: str, identifier: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        work_dir = Path(base_path) / f"work_{identifier}"
        work_dir.mkdir(parents=True, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {work_dir}")
        return str(work_dir)

    @staticmethod
    def calculate_file_hash(file_path: str) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
        hash_md5 = hashlib.md5()
        with open(file_path, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()

    @staticmethod
    def save_intermediate_result(data: Dict[str, Any], file_path: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, ensure_ascii=False, indent=2)
            logger.info(f"‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {file_path}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False

    @staticmethod
    def load_intermediate_result(file_path: str) -> Optional[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            if not os.path.exists(file_path):
                logger.error(f"–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return None

            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            logger.info(f"‚úÖ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")
            return data

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return None

    @staticmethod
    def cleanup_temp_files(directory: str, max_age_hours: int = 24) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        cleaned_count = 0
        current_time = time.time()
        max_age_seconds = max_age_hours * 3600

        try:
            for file_path in Path(directory).rglob("*"):
                if file_path.is_file():
                    file_age = current_time - file_path.stat().st_mtime
                    if file_age > max_age_seconds:
                        file_path.unlink()
                        cleaned_count += 1

            if cleaned_count > 0:
                logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

        return cleaned_count

class NotificationUtils:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    @staticmethod
    def send_success_notification(context: Dict[str, Any], result: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
        try:
            dag_id = context.get('dag', {}).dag_id if hasattr(context.get('dag', {}), 'dag_id') else 'unknown'
            task_id = context.get('task_instance', {}).task_id if hasattr(context.get('task_instance', {}), 'task_id') else 'unknown'

            message = f"""
‚úÖ –£–°–ü–ï–®–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï
DAG: {dag_id}
Task: {task_id}
–í—Ä–µ–º—è: {datetime.now().isoformat()}
–†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('message', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')}
            """

            logger.info(f"SUCCESS NOTIFICATION: {message}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, email, webhook –∏ —Ç.–¥.
            webhook_url = os.getenv('SUCCESS_WEBHOOK_URL')
            if webhook_url:
                requests.post(webhook_url, json={'message': message})

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {e}")
            return False

    @staticmethod
    def send_failure_notification(context: Dict[str, Any], exception: Exception) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            dag_id = context.get('dag', {}).dag_id if hasattr(context.get('dag', {}), 'dag_id') else 'unknown'
            task_id = context.get('task_instance', {}).task_id if hasattr(context.get('task_instance', {}), 'task_id') else 'unknown'

            message = f"""
‚ùå –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø
DAG: {dag_id}
Task: {task_id}
–í—Ä–µ–º—è: {datetime.now().isoformat()}
–û—à–∏–±–∫–∞: {str(exception)}
            """

            logger.error(f"FAILURE NOTIFICATION: {message}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            webhook_url = os.getenv('ERROR_WEBHOOK_URL')
            if webhook_url:
                requests.post(webhook_url, json={'message': message, 'severity': 'error'})

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return False

    @staticmethod
    def send_dag_completion_notification(context: Dict[str, Any], result: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ DAG"""
        try:
            success = result.get('success', False)
            if success:
                return NotificationUtils.send_success_notification(context, result)
            else:
                error = result.get('error', 'Unknown error')
                return NotificationUtils.send_failure_notification(context, Exception(error))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ DAG: {e}")
            return False

class ConfigUtils:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""

    @staticmethod
    def get_vllm_config() -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ vLLM"""
        return {
            'server_url': os.getenv('VLLM_SERVER_URL', 'http://vllm-server:8000'),
            'content_model': os.getenv('VLLM_CONTENT_MODEL', 'Qwen/Qwen2.5-VL-7B-Instruct'),
            'translation_model': os.getenv('VLLM_TRANSLATION_MODEL', 'Qwen/Qwen2.5-72B-Instruct'),
            'api_key': os.getenv('VLLM_API_KEY', 'pdf-converter-secure-key-2024'),
            'timeout': int(os.getenv('VLLM_STANDARD_TIMEOUT', '1800')),
            'max_tokens': int(os.getenv('VLLM_MAX_TOKENS', '8192')),
            'temperature': float(os.getenv('VLLM_TEMPERATURE', '0.1'))
        }

    @staticmethod
    def get_docling_config() -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docling"""
        return {
            'model_path': os.getenv('DOCLING_MODEL_PATH', '/mnt/storage/models/docling'),
            'cache_dir': os.getenv('DOCLING_HOME', '/mnt/storage/models/docling'),
            'use_gpu': os.getenv('DOCLING_USE_GPU', 'true').lower() == 'true',
            'max_workers': int(os.getenv('DOCLING_MAX_WORKERS', '4')),
            'enable_ocr_by_default': False  # ‚úÖ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é OCR –æ—Ç–∫–ª—é—á–µ–Ω
        }

    @staticmethod
    def get_processing_paths() -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return {
            'temp_dir': os.getenv('TEMP_DIR', '/app/temp'),
            'input_dir': os.getenv('INPUT_DIR', '/app/input'),
            'output_dir': os.getenv('OUTPUT_DIR', '/app/output'),
            'cache_dir': os.getenv('CACHE_DIR', '/app/cache'),
            'models_dir': os.getenv('HF_HOME', '/mnt/storage/models/huggingface')
        }

class VLLMUtils:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å vLLM"""

    @staticmethod
    def check_vllm_health(server_url: str, timeout: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ vLLM —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            response = requests.get(f"{server_url}/health", timeout=timeout)
            is_healthy = response.status_code == 200

            if is_healthy:
                logger.info(f"‚úÖ vLLM —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {server_url}")
            else:
                logger.error(f"‚ùå vLLM —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {server_url} (–∫–æ–¥: {response.status_code})")

            return is_healthy

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ vLLM —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False

    @staticmethod
    def get_available_models(server_url: str, api_key: str = None) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        try:
            headers = {}
            if api_key:
                headers['Authorization'] = f'Bearer {api_key}'

            response = requests.get(f"{server_url}/v1/models", headers=headers, timeout=10)

            if response.status_code == 200:
                models_data = response.json()
                models = [model['id'] for model in models_data.get('data', [])]
                logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ vLLM: {models}")
                return models
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {response.status_code}")
                return []

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
            return []

class MetricsUtils:
    """‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""

    @staticmethod
    def record_processing_metrics(
        dag_id: str,
        task_id: str,
        processing_time: float,
        pages_count: int = 0,
        success: bool = True
    ) -> bool:
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è Prometheus"""
        try:
            metrics_data = {
                'dag_id': dag_id,
                'task_id': task_id,
                'processing_time_seconds': processing_time,
                'pages_processed': pages_count,
                'success': success,
                'timestamp': datetime.now().isoformat()
            }

            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: {metrics_data}")

            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –º–µ—Ç—Ä–∏–∫ –≤ Prometheus pushgateway
            pushgateway_url = os.getenv('PUSHGATEWAY_URL')
            if pushgateway_url:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫
                pass

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            return False

class ErrorHandlingUtils:
    """‚úÖ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""

    @staticmethod
    def handle_dag_error(context: Dict[str, Any], custom_message: str = "") -> Dict[str, Any]:
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ DAG"""
        dag_id = context.get('dag', {}).dag_id if hasattr(context.get('dag', {}), 'dag_id') else 'unknown'
        task_id = context.get('task_instance', {}).task_id if hasattr(context.get('task_instance', {}), 'task_id') else 'unknown'
        
        error_info = {
            'dag_id': dag_id,
            'task_id': task_id,
            'execution_date': str(context.get('execution_date', '')),
            'error': str(context.get('exception', 'Unknown error')),
            'custom_message': custom_message,
            'timestamp': datetime.now().isoformat()
        }

        logger.error(f"DAG Error: {error_info}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        NotificationUtils.send_failure_notification(context, context.get('exception'))

        return error_info

# ‚úÖ –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å QualityAssuranceOperator –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class QualityAssuranceOperator:
    """
    ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨: –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è QualityAssuranceOperator
    
    –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ImportError.
    –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —á–µ—Ä–µ–∑ HTTP API!
    """
    
    def __init__(self, *args, **kwargs):
        logger.warning("‚ö†Ô∏è QualityAssuranceOperator —É—Å—Ç–∞—Ä–µ–ª! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
        pass
    
    @staticmethod
    def validate_document(*args, **kwargs):
        """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞"""
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π quality_assurance_v2.py DAG –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
        return {"success": False, "error": "Deprecated operator - use microservice architecture"}

# ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´

class FileUtils:
    """‚úÖ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏"""

    @staticmethod
    def ensure_directory_exists(directory: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        try:
            Path(directory).mkdir(parents=True, exist_ok=True)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")
            return False

    @staticmethod
    def get_file_info(file_path: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ"""
        try:
            file_stat = os.stat(file_path)
            return {
                'size_bytes': file_stat.st_size,
                'size_mb': file_stat.st_size / (1024 * 1024),
                'modified_time': datetime.fromtimestamp(file_stat.st_mtime).isoformat(),
                'exists': True
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {file_path}: {e}")
            return {'exists': False, 'error': str(e)}

# ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —É—Ç–∏–ª–∏—Ç
__all__ = [
    'SharedUtils',
    'NotificationUtils',
    'ConfigUtils',
    'VLLMUtils',
    'MetricsUtils',
    'FileUtils',
    'ErrorHandlingUtils',
    'QualityAssuranceOperator'  # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
]